# main
from create_bot import bot, dp 

from bot.data.db import Database
from bot.data.config import path
from bot.keyboards.user.game_key.game_key import start_knb_game, back_in_knb

# other
import base64
import random
import asyncio
from aiogram import types 
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import Text
from aiogram.dispatcher.filters.state import State, StatesGroup

db = Database(path)

class game_knb_state(StatesGroup):

    value_amount = State()

def forrmated_name_stavka(emoji):
    if emoji == '‚úäüèª':
        return '‚úäüèª –ö–∞–º–µ–Ω—å'
    elif emoji == '‚úåüèª':
        return '‚úåüèª –ù–æ–∂–Ω–∏—Ü—ã'
    elif emoji == 'ü§öüèª':
        return 'ü§öüèª –ë—É–º–∞–≥–∞'

@dp.callback_query_handler(text='knb_game', state='*')
async def call_knb_game(call: types.CallbackQuery, state: FSMContext):

    await state.finish()
    user_id = call.from_user.id 
    message_id = call.message.message_id

    await bot.answer_callback_query(call.id, f"‚úåüèª")
    await bot.edit_message_caption(chat_id=user_id,
                                   message_id=message_id,
                                   caption=f"<b>[‚ÑπÔ∏è] –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É!\n\n[‚Ä¢] –ò–≥—Ä–∞: ‚úåüèª –ö–ù–ë\n[‚Ä¢] –°—É—Ç—å –∏–≥—Ä—ã: <i>–û–±—ã—á–Ω–∞—è –∏–≥—Ä–∞ –∫–∞–º–µ–Ω—å\–Ω–æ–∂–Ω–∏—Ü—ã\–±—É–º–∞–≥–∞.</i></b>",
                                   reply_markup=start_knb_game())
    


@dp.callback_query_handler(Text(startswith='knbplay'))
async def call_knbplay(call: types.CallbackQuery, state: FSMContext):

    user_id = call.from_user.id 
    message_id = call.message.message_id

    data = call.data.split('_')
    emoji = data[1]

    await bot.answer_callback_query(call.id, f"{emoji}")
    await bot.edit_message_caption(chat_id=user_id,
                                   message_id=message_id,
                                   caption=f"<b>[‚ÑπÔ∏è] –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏!\n\n[‚Ä¢] –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: <i>{forrmated_name_stavka(emoji)}</i>\n[‚Ä¢] –ë–∞–ª–∞–Ω—Å: <i>{db.get_balance(user_id)}$</i></b>",
                                   reply_markup=back_in_knb())
    await game_knb_state.value_amount.set()
    async with state.proxy() as data:
        data['emoji'] = emoji


@dp.message_handler(state=game_knb_state.value_amount)
async def message_game_balance(message: types.Message, state: FSMContext):

    user_id = message.from_user.id 
    message_id = message.message_id

    async with state.proxy() as data:
        emojis = data.get('emoji')

        try:
            amount = float(message.text)
        except:
            await state.finish()
            with open('bot/photo/main.jpg', 'rb') as photo:
                await bot.send_photo(chat_id=user_id,
                                    photo=photo,
                                    caption=f"<b>[‚ÑπÔ∏è] –ù–µ –≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ —Å—É–º–º—ã!\n\n[‚Ä¢] –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!</b>",
                                    reply_markup=back_in_knb())
            return
        
        if amount >= 0.2:
            if float(db.get_balance(user_id)) >= amount:
                await state.finish()

                db.minus_balance(amount, user_id)
                db.plus_turnover(amount, user_id)
                db.plus_games(user_id)

                await bot.send_message(chat_id=user_id, text=f"<b>‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞</b>")
                await bot.send_message(chat_id=user_id, text=f'{emojis}')

                if emojis == 'ü§öüèª':
                    bot_choice = random.choice(['‚úäüèª', '‚úåüèª'])
                elif emojis == '‚úäüèª':
                    bot_choice = random.choice(['‚úåüèª', 'ü§öüèª'])
                elif emojis == '‚úåüèª':
                    bot_choice = random.choice(['‚úäüèª', 'ü§öüèª'])

                await asyncio.sleep(0.9)
                
                await bot.send_message(chat_id=user_id, text=f"{bot_choice}")

                win_map = {
                    'ü§öüèª': '‚úäüèª',
                    '‚úäüèª': '‚úåüèª',
                    '‚úåüèª': 'ü§öüèª',
                }

                if emojis == bot_choice:
                    result = "[ü§ù] –ù–∏—á—å—è! –í–∞—à –±–∞–ª–∞–Ω—Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω!"
                    db.plus_balance(amount, user_id)
                elif win_map[emojis] == bot_choice:
                    koef = amount * 1.8
                    db.plus_balance(koef, user_id)
                    result = f"[üèÜ] –ü–æ–±–µ–¥–∞! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ <i>{round(koef,2)}$</i>"
                else:
                    result = f"[üòî] –ü–æ—Ä–∞–∂–µ–Ω–∏–µ! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ <i>{amount}$</i>"

                await asyncio.sleep(0.3)

                with open('bot/photo/main.jpg', 'rb') as photo:
                    await bot.send_photo(chat_id=user_id,
                                    photo=photo,
                                    caption=f"<b>{result}!\n\n[‚ö°Ô∏è] –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏ —Å—ã–≥—Ä–∞–π—Ç–µ –µ—â–µ —Ä–∞–∑!</b>",
                                    reply_markup=back_in_knb())

            else:
                with open('bot/photo/main.jpg', 'rb') as photo:
                    await bot.send_photo(chat_id=user_id,
                                    photo=photo,
                                    caption=f"<b>[‚ÑπÔ∏è] –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n[‚Ä¢] –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!</b>",
                                    reply_markup=back_in_knb())
        else:
            with open('bot/photo/main.jpg', 'rb') as photo:
                await bot.send_photo(chat_id=user_id,
                                    photo=photo,
                                    caption=f"<b>[‚ÑπÔ∏è] –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ <i>0.2$</i>!\n\n[‚Ä¢] –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!</b>",
                                    reply_markup=back_in_knb())

